name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]


env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:

        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        # remove-android: 'true'
        # remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push image Aliyun
      run: |
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
        
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
        
            # 初始化默认值
            library="docker.io"
            namespace="library"
            tag="latest"
            platform="linux/amd64"
        
            # 提取 platform
            platform_part=${line#*--platform }
            if [[ $platform_part != $line ]]; then
                platform=${platform_part}
            fi
        
            # 提取 tag 部分
            image_part=${line% --platform*}
            if [[ $image_part == *:* ]]; then
                # 提取 tag
                tag=${image_part##*:}
                image_part=${image_part%:*}
            fi
        
            # echo "image part" $image_part
            if [[ $image_part == */* ]]; then
                # 提取 image
                image=${image_part##*/} # 提取 image_part 中最后一个 / 之后的部分。
                # 提取 namespace
                namespace_part=${image_part%/*} # 去掉 image_part 中最后一个 / 之后的部分。
            else
                # 提取 image
                image=${image_part} # 提取 image_part 中最后一个 / 之后的部分。
            fi
        
            # echo "namespace_part" $namespace_part
            if [[ $namespace_part == */* ]]; then
                # 提取 namespace
                namespace=${namespace_part##*/} # 提取 namespace 中最后一个 / 之后的部分。
                # 提取 library
                library=${namespace_part%/*} # 去掉 namespace 中最后一个 / 之后的部分。
            else 
                # 提取 library
                namespace=${namespace_part##*/} # 提取 library_part 中最后一个 / 之后的部分。
        
                if [ -z "$namespace" ]; then
                    namespace="library"
                fi
            fi
        
            old_image="$library/$namespace/$image:$tag"
            echo "old_image: $old_image"
        
            # echo " library:"   $library
            # echo " namespace:" $namespace
            # echo " image:"     $image
            # echo " tag:"       $tag
            # echo " platform:"  $platform
        
            # # 生成唯一标识符
            unique_identifier="${library}_${namespace}_${image}:${tag}"
            if [[ $platform != "linux/amd64" ]]; then
                unique_identifier="${unique_identifier}_${platform//\//-}"
            fi
            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$unique_identifier"
        
            echo "new_image: $unique_identifier"
        
            echo "docker pull $line"
            docker pull $line
        
            echo "docker tag $old_image $new_image"
            docker tag $old_image $new_image
        
            echo "docker push $new_image"
            docker push $new_image

        done < images.txt
